{
  "_args": [
    [
      {
        "raw": "cachedfs@=0.3.1",
        "scope": null,
        "escapedName": "cachedfs",
        "name": "cachedfs",
        "rawSpec": "=0.3.1",
        "spec": "0.3.1",
        "type": "version"
      },
      "/Users/nativodigital/Proyectos Node JS/Electron framework/app/electron-quick-start/node_modules/slint"
    ]
  ],
  "_from": "cachedfs@0.3.1",
  "_id": "cachedfs@0.3.1",
  "_inCache": true,
  "_location": "/cachedfs",
  "_npmUser": {
    "name": "papandreou",
    "email": "andreas@one.com"
  },
  "_npmVersion": "1.1.59",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cachedfs@=0.3.1",
    "scope": null,
    "escapedName": "cachedfs",
    "name": "cachedfs",
    "rawSpec": "=0.3.1",
    "spec": "0.3.1",
    "type": "version"
  },
  "_requiredBy": [
    "/slint"
  ],
  "_resolved": "https://registry.npmjs.org/cachedfs/-/cachedfs-0.3.1.tgz",
  "_shasum": "586864ce3a9889a5a4204aad8a26c38e730dbe3e",
  "_shrinkwrap": null,
  "_spec": "cachedfs@=0.3.1",
  "_where": "/Users/nativodigital/Proyectos Node JS/Electron framework/app/electron-quick-start/node_modules/slint",
  "author": {
    "name": "Andreas Lind Petersen",
    "email": "andreas@one.com"
  },
  "dependencies": {
    "bufferedstream": "~1.6.0",
    "lru-cache": "=2.3.1",
    "memoizeasync": "=0.4.2",
    "memoizesync": "=0.4.2",
    "passerror": "=0.0.2",
    "underscore": "=1.5.2"
  },
  "description": "Caching wrapper for node.js' built-in fs module (or compatible)",
  "devDependencies": {
    "mocha": "=1.13.0",
    "sinon": "=1.7.3",
    "unexpected": "=1.0.1",
    "unexpected-sinon": "=0.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "586864ce3a9889a5a4204aad8a26c38e730dbe3e",
    "tarball": "https://registry.npmjs.org/cachedfs/-/cachedfs-0.3.1.tgz"
  },
  "license": "BSD",
  "main": "lib/CachedFs.js",
  "maintainers": [
    {
      "name": "papandreou",
      "email": "andreas@one.com"
    }
  ],
  "name": "cachedfs",
  "optionalDependencies": {},
  "readme": "CachedFs\n========\n\nWrap node.js' fs module in a cached read-only version that exposes the\nsame interface. Can speed up things if you're reading the same files\nand directories multiple times.\n\nDoesn't expose the functions that write to disc, so no cache\ninvalidation is ever performed internally.\n\n```javascript\nvar CachedFs = require('cachedfs'),\n    fs = new CachedFs(require('fs'));\n\nfs.readFile('foo.txt', function (err, contents) {\n    fs.readFile('foo.txt', function (err, contentsAgain) {\n        // Much faster this time!\n    });\n});\n```\n\nSupported functions (plus their -`Sync` counterparts):\n * `stat`\n * `lstat`\n * `fstat`\n * `readlink`\n * `realpath`\n * `readdir`\n * `readFile`\n * `exists`\n\nBonus features:\n\n * File names are absolutified and normalized before being used in a\n   cache key, so you'll get cache hits even if you refer to the same\n   file with different syntaxes, eg. a relative and an absolute path.\n * Errors are also cached.\n * Even if the underlying `fs` implementation doesn't support a given\n   sync method, it will produce the correct result if the CachedFs\n   instance happens to have a cached copy of the async method's result.\n\nInstallation\n------------\n\nMake sure you have node.js and npm installed, then run:\n\n    npm install cachedfs\n\nLicense\n-------\n\n3-clause BSD license -- see the `LICENSE` file for details.\n",
  "scripts": {
    "test": "mocha"
  },
  "version": "0.3.1"
}
